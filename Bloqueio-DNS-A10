import os
import subprocess

MAX_LINHAS = 8000  # Máximo de linhas por arquivo domains.rpz
PASTA_DESTINO = "/home/agnet"  # Pasta para os arquivos .rpz
ARQUIVO_SITES = "/etc/bloqueiodesites/sites"  # Arquivo com a lista de domínios

def executar_comando(comando):
    """Função para executar comandos no shell."""
    try:
        print(f"Executando: {comando}")
        subprocess.run(comando, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Erro ao executar: {comando}")
        print(e)

def baixar_lista_de_sites():
    """Baixa a lista de sites para bloqueio."""
    url_lista = "https://raw.githubusercontent.com/Badcebola/blockcebola/refs/heads/main/Sites-bloqueios"
    
    # Baixar a lista de sites usando curl
    executar_comando(f"curl -s {url_lista} -o {ARQUIVO_SITES}")
    print("Lista de sites baixada com sucesso.")

def criar_arquivos_drop_domains():
    """Cria múltiplos arquivos domains.rpz conforme o limite de 8 mil linhas."""
    print("Criando arquivos domains.rpz com base na lista baixada...")
    
    if os.path.exists(ARQUIVO_SITES):
        # Garantir que a pasta destino existe
        os.makedirs(PASTA_DESTINO, exist_ok=True)

        with open(ARQUIVO_SITES, 'r') as site_file:
            count = 0
            arquivo_index = 1
            drop_file = open(f"{PASTA_DESTINO}/domains_{arquivo_index}.rpz", 'w')

            for linha in site_file:
                dominio = linha.strip()
                if dominio:  # Ignorar linhas em branco
                    drop_file.write(f"*{dominio} IN CNAME rpz-drop.\n")
                    count += 1

                if count >= MAX_LINHAS:
                    drop_file.close()
                    print(f"Arquivo domains_{arquivo_index}.rpz criado com {count} linhas.")
                    arquivo_index += 1
                    count = 0
                    drop_file = open(f"{PASTA_DESTINO}/domains_{arquivo_index}.rpz", 'w')

            drop_file.close()
            print(f"Arquivo domains_{arquivo_index}.rpz criado com {count} linhas finais.")
    else:
        print(f"Erro: Arquivo de sites {ARQUIVO_SITES} não encontrado.")

if __name__ == "__main__":
    # Criar o diretório se ele não existir
    if not os.path.exists("/etc/bloqueiodesites"):
        executar_comando("mkdir -p /etc/bloqueiodesites")
        print("Diretório /etc/bloqueiodesites criado com sucesso.")
    
    if os.path.exists("/etc/bloqueiodesites"):  # Verifica o diretório correto
        baixar_lista_de_sites()
        criar_arquivos_drop_domains()
        print("Processo de criação de arquivos domains.rpz finalizado com sucesso.")
